default_language_version:
  python: python3
  node: "16.14.2"
exclude: |
  (?x)
  # Files that fail if changed manually
  .*\.(diff|patch)$
repos:
  # General
  - repo: local
    hooks:
      - id: forbidden-files
        name: forbidden files
        entry: found forbidden files; remove them
        language: fail
        files: "\\.rej$"
  {#- Prettier is considered general because it reformats Markdown, YAML and XML
     (with the activated plugin), which are too common as to ask the user,
     although it's true that it will also format JS, HTML, CSS and others #}
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v2.6.2
    hooks:
      - id: prettier
        stages: [commit]
        additional_dependencies:
          - prettier@2.6.2
          - "@prettier/plugin-xml@2.1.0"
        args:
          - --plugin=@prettier/plugin-xml
{%- if js %}
  - repo: https://github.com/pre-commit/mirrors-eslint
    rev: v8.14.0
    hooks:
      - id: eslint
        verbose: true
        args:
          - --color
          - --fix
{%- endif %}
{%- if python %}
{%- if poetry_local_hooks %}
{#- These hooks are copied from their respective origins in the next section,
    but configured to be executed with `poetry run`, to get better integration #}
  - repo: local
    hooks:
      - id: autoflake
        name: autoflake
        entry: poetry run autoflake
        language: system
        types: [python]
        require_serial: true
        args:
          - --in-place
          - --expand-star-imports
          - --ignore-init-module-imports
          - --remove-all-unused-imports
          - --remove-duplicate-keys
          - --remove-unused-variables
      - id: pyupgrade
        name: pyupgrade
        description: Automatically upgrade syntax for newer versions.
        entry: poetry run pyupgrade
        language: system
        types: [python]
      - id: black
        name: black
        description: "Black: The uncompromising Python code formatter"
        entry: poetry run black
        language: system
        minimum_pre_commit_version: 2.9.2
        require_serial: true
        types_or: [python, pyi]
      - id: blacken-docs
        name: blacken-docs
        description: Run `black` on python code blocks in documentation files
        entry: poetry run blacken-docs
        language: system
        files: '\.(rst|md|markdown|py|tex)$'
      - id: isort
        name: isort
        entry: poetry run isort
        require_serial: true
        language: system
        types_or: [cython, pyi, python]
        minimum_pre_commit_version: '2.9.2'
        args:
          - --filter-files
          - --settings=.
      - &flake8
        id: flake8
        name: flake8 except __init__.py
        description: '`flake8` is a command-line utility for enforcing style consistency across Python projects.'
        entry: poetry run flake8
        language: system
        types: [python]
        require_serial: true
        exclude: /__init__\.py$
      - <<: *flake8
        name: flake8 for __init__.py
        args:
          # ignore unused imports in __init__.py
          - --extend-ignore=F401
        files: /__init__\.py$
      - id: pydocstyle
        name: pydocstyle
        description: pydocstyle is a static analysis tool for checking compliance with Python docstring conventions.
        entry: poetry run pydocstyle
        language: system
        types: [python]
      - id: poetry-check
        name: poetry-check
        description: run poetry check to validate config
        entry: poetry check
        language: system
        pass_filenames: false
        files: ^pyproject.toml$
    {%- if commitizen %}
      - id: commitizen
        name: commitizen check
        description: "Check whether the commit message follows commiting rules"
        entry: poetry run cz check --commit-msg-file
        language: system
        require_serial: true
        stages: [commit-msg]
        minimum_pre_commit_version: "0.15.4"
    {%- endif %}
{%- else %}
  - repo: https://github.com/myint/autoflake
    rev: v1.4
    hooks:
      - id: autoflake
        args:
          - --in-place
          - --expand-star-imports
          - --ignore-init-module-imports
          - --remove-all-unused-imports
          - --remove-duplicate-keys
          - --remove-unused-variables
  - repo: https://github.com/asottile/pyupgrade
    rev: v2.32.0
    hooks:
      - id: pyupgrade
  - repo: https://github.com/psf/black
    rev: 22.3.0
    hooks:
      - id: black
  - repo: https://github.com/asottile/blacken-docs
    rev: v1.12.1
    hooks:
      - id: blacken-docs
        additional_dependencies:
          - black==21.12b0
  - repo: https://github.com/timothycrosley/isort
    rev: 5.10.1
    hooks:
      - id: isort
        args:
          - --settings=.
  - repo: https://gitlab.com/pycqa/flake8
    rev: 3.9.2
    hooks:
      - &flake8
        id: flake8
        name: flake8 except __init__.py
        exclude: /__init__\.py$
        additional_dependencies:
          - flake8-bugbear==22.1.11
      - <<: *flake8
        name: flake8 for __init__.py
        args:
          # ignore unused imports in __init__.py
          - --extend-ignore=F401
        files: /__init__\.py$
  - repo: https://github.com/PyCQA/pydocstyle
    rev: 6.1.1
    hooks:
      - id: pydocstyle
        additional_dependencies: [".[toml]"]
{%- endif %}
{%- endif %}
{%- if terraform %}
  - repo: https://github.com/aquasecurity/tfsec
    rev: v0.63.1
    hooks:
      - id: tfsec
  - repo: https://github.com/antonbabenko/pre-commit-terraform
    rev: v1.62.3
    hooks:
      - id: terraform_fmt
      - id: terraform_providers_lock
      - id: terraform_validate
{%- endif %}
{%- if ansible %}
  - repo: https://github.com/IamTheFij/ansible-pre-commit
    rev: v1.0.0
    hooks:
      - id: encryption-check
  - repo: https://github.com/ansible/ansible-lint
    rev: v6.0.2
    hooks:
      - id: ansible-lint
{%- endif %}
{%- if nix %}
  - repo: https://github.com/nix-community/nixpkgs-fmt
    rev: v1.2.0
    hooks:
      - id: nixpkgs-fmt
{%- endif %}
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.2.0
    hooks:
    {%- if biggest_kbs %}
      - id: check-added-large-files
        args:
          - --maxkb={{ biggest_kbs }}
    {%- endif %}
      - id: check-case-conflict
      - id: check-executables-have-shebangs
      - id: check-merge-conflict
      - id: check-symlinks
        exclude: gitlab-ci
      - id: detect-private-key
      - id: end-of-file-fixer
      - id: mixed-line-ending
        args:
          - --fix=lf
      - id: trailing-whitespace
    {%- if python %}
      - id: check-ast
      - id: check-builtin-literals
      - id: check-docstring-first
      - id: debug-statements
      - id: fix-encoding-pragma
        args:
          - --remove
      - id: requirements-txt-fixer
    {%- endif %}
{%- if commitizen and not poetry_local_hooks %}
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v2.24.0
    hooks:
      - id: commitizen
        stages: [commit-msg]
{%- endif %}
